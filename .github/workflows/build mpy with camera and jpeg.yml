name: build mpy with camera (make)

# 触发条件：仅手动触发
on:
  workflow_dispatch:

# 并发控制：同一分支仅保留最新一次运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MICROPYTHON_DIR: ${{ github.workspace }}/micropython  # MicroPython 的目录
  ESP_IDF_DIR: ${{ github.workspace }}/esp-idf  # ESP-IDF 的目录
  ARTIFACTS_DIR: ${{ github.workspace }}/artifacts  # 构建产物的目录
  MPY_VERSION: v1.25.0  # MicroPython 的版本
  ESP_IDF_VERSION: v5.4.1  # ESP-IDF 的版本

jobs:
  # 第一步：准备编译环境（ESP-IDF、MicroPython、摄像头驱动）
  setup-environment:
    runs-on: ubuntu-24.04
    steps:
      # 1.缓存 ESP-IDF 和 MicroPython
      - name: Cache ESP-IDF and MicroPython
        id: cache_esp_idf
        uses: actions/cache@v4
        with:
          path: |  # 缓存路径
            ${{ env.ESP_IDF_DIR }}
            ~/.espressif/
            ~/.cache/pip/
            ${{ env.MICROPYTHON_DIR }}
          key: mpy-${{ env.MPY_VERSION }}-idf-${{ env.ESP_IDF_VERSION }}  # 缓存键
          restore-keys: |  # 如果缓存键不匹配，尝试恢复部分缓存
            mpy-${{ env.MPY_VERSION }}-idf-
            mpy-

      # 2.安装依赖（如果未缓存）
      - name: Install dependencies (if not cached)  
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'  # 如果缓存未命中
        run: |
          sudo apt-get update  # 更新包列表
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0  # 安装依赖

      # 3.克隆指定版本的 MicroPython（如果未缓存）
      - name: Clone MicroPython specific version (if not cached)
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'  # 如果缓存未命中
        run: |
          git clone --depth 1 --branch ${{ env.MPY_VERSION }} https://github.com/micropython/micropython.git ${{ env.MICROPYTHON_DIR }}  # 克隆 MicroPython
          cd ${{ env.MICROPYTHON_DIR }}
          git submodule update --init --depth 1  # 更新子模块
          cd mpy-cross && make  # 编译 mpy-cross 工具

      # 4.设置指定版本的 ESP-IDF（如果未缓存）
      - name: Set up ESP-IDF specific version (if not cached)  
        if: steps.cache_esp_idf.outputs.cache-hit != 'true'  # 如果缓存未命中
        run: |
          git clone --depth 1 --branch ${{ env.ESP_IDF_VERSION }} https://github.com/espressif/esp-idf.git ${{ env.ESP_IDF_DIR }}  # 克隆 ESP-IDF
          git -C ${{ env.ESP_IDF_DIR }} submodule update --init --recursive --filter=tree:0  # 更新子模块
          cd ${{ env.ESP_IDF_DIR }} && ./install.sh esp32,esp32s3,esp32c3  # 安装 ESP-IDF
          cd components
          # 使用 cnadler86 的 esp32-camera 分支（适配 MicroPython）
          git clone https://github.com/cnadler86/esp32-camera.git
          cd ${{ env.ESP_IDF_DIR }}          
          source ./export.sh  # 导入 ESP-IDF 的环境变量
          cd ${{ github.workspace }}
          # 拷贝 esp-adf-libs 中的 esp_new_jpeg 组件
          git clone https://github.com/espressif/esp-adf-libs.git
          cp -r ${{ github.workspace }}/esp-adf-libs/esp_new_jpeg ${{ env.ESP_IDF_DIR }}/components/         

  # 第二步：并行构建各开发板固件
  build:
    needs: setup-environment
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: ESP32_GENERIC_S3
            variant: ""
            flash_size: 8
          - board: ESP32_GENERIC_S3
            variant: SPIRAM_OCT
            flash_size: 16
          - board: ESP32_GENERIC_S3
            variant: SPIRAM_OCT
            flash_size: 8

    steps:
      # 2. 恢复缓存
      - name: 2.恢复 ESP-IDF 与 MicroPython 缓存
        uses: actions/cache@v4  # 使用 GitHub Actions 的缓存功能
        with:
          path: |  # 缓存路径
            ${{ env.ESP_IDF_DIR }}
            ~/.espressif/
            ~/.cache/pip/
            ${{ env.MICROPYTHON_DIR }}
          key: mpy-${{ env.MPY_VERSION }}-idf-${{ env.ESP_IDF_VERSION }}  # 缓存键
          restore-keys: |  # 如果缓存键不匹配，尝试恢复部分缓存
            mpy-${{ env.MPY_VERSION }}-idf-
            mpy-

      - name: 检出仓库
        uses: actions/checkout@v4

      # 克隆 JPEG 模块
      - name: 克隆 JPEG 模块
        run: |
          git clone https://github.com/cnadler86/mp_jpeg.git

      # 生成聚合 user_modules.cmake
      - name: 生成聚合 user_modules.cmake
        run: |
          cat > ${{ github.workspace }}/user_modules.cmake <<'EOF'
          include("${CMAKE_CURRENT_LIST_DIR}/src/micropython.cmake")
          include("${CMAKE_CURRENT_LIST_DIR}/mp_jpeg/src/micropython.cmake")
          EOF

      # 编译固件
      - name: 编译固件
        run: |
          cd ${{ env.ESP_IDF_DIR }}
          ./install.sh esp32,esp32s3,esp32c3
          source ./export.sh
          cd ${{ env.MICROPYTHON_DIR }}/ports/esp32
          make BOARD=${{ matrix.board }} \
               BOARD_VARIANT=${{ matrix.variant }} \
               FLASH_SIZE=${{ matrix.flash_size }}MB \
               USER_C_MODULES="${{ github.workspace }}/user_modules.cmake" \
               -j$(nproc)

      - name: 重命名并上传固件
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
         
          # 拼出构建目录名：board 与可选 variant 用 “-” 连接
          BOARD_NAME="${{ matrix.board }}"
          [[ -n "${{ matrix.variant }}" ]] && BOARD_NAME+="-${{ matrix.variant }}"
          # 计算固件真正所在路径
          FW_PATH="${{ env.MICROPYTHON_DIR }}/ports/esp32/build-${BOARD_NAME}/firmware.bin"
          
          OUT_NAME="${{ matrix.board }}${{ matrix.variant && format('_{0}', matrix.variant) || '' }}_${{ matrix.flash_size }}MB.bin"

          echo "编译输出目录内容："
          ls -la ${{ env.MICROPYTHON_DIR }}/ports/esp32/build-${BOARD_NAME}

          if [[ -f "$FW_PATH" ]]; then
            cp $FW_PATH ${{ env.ARTIFACTS_DIR }}/$OUT_NAME
          else
            echo "Firmware not found at $FW_PATH"
            exit 1
          fi

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: mpy_cam-${{ matrix.board }}${{ matrix.variant && format('_{0}', matrix.variant) || '' }}_${{ matrix.flash_size }}MB
          path: ${{ env.ARTIFACTS_DIR }}/*.bin