name: build mpy with camera (make)

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ESP_IDF_DIR: ~/esp-idf
  MICROPYTHON_DIR: ~/micropython
  ARTIFACTS_DIR: ~/artifacts

jobs:
  setup-environment:
    runs-on: ubuntu-24.04
    outputs:
      mpy_release: ${{ steps.vars.outputs.MPY_RELEASE }}
    steps:
      - name: 获取 MicroPython 最新版本
        id: vars
        run: |
          MPY_RELEASE=$(curl -s https://api.github.com/repos/micropython/micropython/releases/latest | jq -r .tag_name)
          echo "MPY_RELEASE=$MPY_RELEASE" >> $GITHUB_OUTPUT
          echo "MPY_RELEASE=$MPY_RELEASE" >> $GITHUB_ENV

      - name: 缓存工具链
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ESP_IDF_DIR }}/
            ~/.espressif/
            ~/.cache/pip/
            ${{ env.MICROPYTHON_DIR }}/
          key: mpy-make-${{ env.MPY_RELEASE }}-v5.4.1
          restore-keys: mpy-make-

      - name: 安装系统依赖
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0 build-essential pkg-config

      - name: 克隆并配置 ESP-IDF
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd ~
          git clone --depth 1 --branch v5.4.1 https://github.com/espressif/esp-idf.git
          cd esp-idf
          ./install.sh all
          source export.sh
          cd components
          git clone https://github.com/cnadler86/esp32-camera.git
          git clone https://github.com/espressif/esp-adf-libs.git
          cp -r esp-adf-libs/esp_new_jpeg ./

      - name: 克隆并准备 MicroPython
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          source ${{ env.ESP_IDF_DIR }}/export.sh
          
          cd ~
          git clone --depth 1 --branch ${{ env.MPY_RELEASE }} https://github.com/micropython/micropython.git
          cd micropython/mpy-cross && make
          cd ../ports/esp32 && make submodules

  build:
    needs: setup-environment
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: ESP32_GENERIC_S3
            variant: ""
            flash_size: 8
          - board: ESP32_GENERIC_S3
            variant: SPIRAM_OCT
            flash_size: 16
          - board: ESP32_GENERIC_S3
            variant: SPIRAM_OCT
            flash_size: 8

    steps:
      - name: 恢复缓存
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ESP_IDF_DIR }}/
            ~/.espressif/
            ${{ env.MICROPYTHON_DIR }}/
          key: mpy-make-${{ needs.setup-environment.outputs.mpy_release }}-v5.4.1

      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 克隆 JPEG 模块
        run: |
          git clone https://github.com/cnadler86/mp_jpeg.git

      - name: 编译固件
        run: |
          source ${{ env.ESP_IDF_DIR }}/export.sh
          cd ${{ env.MICROPYTHON_DIR }}/ports/esp32

          # 构造 USER_C_MODULES
          USER_C_MODULES_LIST="${{ github.workspace }}/src/micropython.cmake;${{ github.workspace }}/mp_jpeg/src/micropython.cmake"

          make BOARD=${{ matrix.board }} \
               BOARD_VARIANT=${{ matrix.variant }} \
               FLASH_SIZE=${{ matrix.flash_size }}MB \
               USER_C_MODULES=$USER_C_MODULES_LIST \
               -j$(nproc)

      - name: 重命名并上传固件
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          BOARD_NAME="${{ matrix.board }}${{ matrix.variant && format('-{0}', matrix.variant) || '' }}"
          FW_PATH="${{ env.MICROPYTHON_DIR }}/ports/esp32/build-${BOARD_NAME}/firmware.bin"
          OUT_NAME="${{ matrix.board }}${{ matrix.variant && format('_{0}', matrix.variant) || '' }}_${{ matrix.flash_size }}MB.bin"

          if [[ -f "$FW_PATH" ]]; then
            cp "$FW_PATH" "${{ env.ARTIFACTS_DIR }}/$OUT_NAME"
          else
            echo "❌ 固件未找到：$FW_PATH"
            exit 1
          fi

      - name: 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: mpy_cam-${{ needs.setup-environment.outputs.mpy_release }}-${{ matrix.board }}${{ matrix.variant && format('_{0}', matrix.variant) || '' }}_${{ matrix.flash_size }}MB
          path: ${{ env.ARTIFACTS_DIR }}/*.bin